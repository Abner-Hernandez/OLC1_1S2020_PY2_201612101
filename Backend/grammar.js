/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[10,13],$V3=[5,13],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,29],$V9=[1,30],$Va=[16,25,26,27,28,29,30],$Vb=[12,31,33],$Vc=[2,31],$Vd=[1,57],$Ve=[1,52],$Vf=[1,51],$Vg=[1,47],$Vh=[1,49],$Vi=[1,50],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,56],$Vn=[1,63],$Vo=[1,65],$Vp=[1,67],$Vq=[1,68],$Vr=[12,23,31,60,69,71,73,74,75,77,78,79,80,81,82],$Vs=[1,72],$Vt=[12,23,31,60,69,71,73,74,75,77,78,79,80,81,82,84,85,86,87],$Vu=[1,77],$Vv=[1,98],$Vw=[1,100],$Vx=[1,95],$Vy=[1,96],$Vz=[1,97],$VA=[1,108],$VB=[1,102],$VC=[1,103],$VD=[1,104],$VE=[1,105],$VF=[1,106],$VG=[23,31],$VH=[2,11,16,25,26,27,28,29,30,46,47,48,53,55,56,59,61,62,63,64,68],$VI=[2,11,16,26,27,28,29,30,46,47,48,55,56,59,61,62,63,64,68],$VJ=[1,136],$VK=[2,11,16,26,27,28,29,30,46,47,48,53,55,56,59,61,62,63,64,68],$VL=[12,23,31,60,69,71,73,74,75,77,78,79,80,81,82,84,85,86],$VM=[1,162],$VN=[12,23,60,69],$VO=[12,23,60,69,71],$VP=[12,23,60,69,71,73,74,75],$VQ=[12,23,60,69,71,73,74,75,77,78,79,80],$VR=[16,59,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"RCLASS":4,"EOF":5,"IMPORTS":6,"IMPORTD":7,"CLASSES":8,"CLASSD":9,"resimport":10,"id":11,"puntocoma":12,"resclass":13,"corchetea":14,"INSTRUCTIONSG":15,"corchetec":16,"INSTRUCTIONG":17,"FUNCTION":18,"DECLARATION":19,"TYPE":20,"parenta":21,"LISTAPARAMETROS":22,"parentc":23,"BLOCK":24,"resvoid":25,"resinteger":26,"resdouble":27,"resboolean":28,"reschar":29,"resstring":30,"coma":31,"LISTID":32,"igual":33,"EXP":34,"BLOCK2":35,"INSTRUCTIONS":36,"INSTRUCTION":37,"ASSIGNMENT":38,"IF":39,"SWITCH":40,"WHILE":41,"DOWHILE":42,"FOR":43,"PRINT":44,"CALLF":45,"resbreak":46,"rescontinue":47,"resreturn":48,"PARAMETROUNITARIO":49,"EXPRT":50,"CELSE":51,"ELSE":52,"reselse":53,"IFF":54,"resif":55,"resswitch":56,"CASES":57,"DEFAULT":58,"rescase":59,"dospuntos":60,"resdefault":61,"reswhile":62,"resdo":63,"resfor":64,"DECINC":65,"incremento":66,"decremento":67,"resprint":68,"or":69,"EXPRT2":70,"and":71,"EXPR":72,"diferente":73,"identico":74,"referencias":75,"EXPR1":76,"mayor":77,"menor":78,"mayorigual":79,"menorigual":80,"suma":81,"resta":82,"EXP1":83,"multiplicacion":84,"slash":85,"modulo":86,"potencia":87,"EXP2":88,"not":89,"EXP3":90,"decimal":91,"entero":92,"cadena":93,"caracter":94,"restrue":95,"resfalse":96,"PARAMETERS":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"resimport",11:"id",12:"puntocoma",13:"resclass",14:"corchetea",16:"corchetec",21:"parenta",23:"parentc",25:"resvoid",26:"resinteger",27:"resdouble",28:"resboolean",29:"reschar",30:"resstring",31:"coma",33:"igual",46:"resbreak",47:"rescontinue",48:"resreturn",53:"reselse",55:"resif",56:"resswitch",59:"rescase",60:"dospuntos",61:"resdefault",62:"reswhile",63:"resdo",64:"resfor",66:"incremento",67:"decremento",68:"resprint",69:"or",71:"and",73:"diferente",74:"identico",75:"referencias",77:"mayor",78:"menor",79:"mayorigual",80:"menorigual",81:"suma",82:"resta",84:"multiplicacion",85:"slash",86:"modulo",87:"potencia",89:"not",91:"decimal",92:"entero",93:"cadena",94:"caracter",95:"restrue",96:"resfalse"},
productions_: [0,[3,2],[3,1],[6,1],[6,2],[8,1],[8,2],[7,3],[9,5],[4,2],[4,1],[4,1],[15,2],[15,1],[15,1],[17,1],[17,2],[18,6],[18,6],[18,5],[18,5],[20,1],[20,1],[20,1],[20,1],[20,1],[22,4],[22,2],[19,4],[19,2],[32,3],[32,1],[24,2],[35,2],[35,1],[36,2],[36,1],[37,2],[37,2],[37,1],[37,1],[37,1],[37,2],[37,1],[37,2],[37,2],[37,2],[37,2],[37,3],[37,2],[37,1],[38,3],[49,3],[39,2],[51,3],[51,1],[52,2],[52,0],[54,3],[40,6],[57,5],[57,4],[57,4],[57,3],[58,3],[58,2],[58,0],[41,3],[42,4],[43,10],[65,1],[65,1],[44,2],[50,3],[50,1],[70,3],[70,1],[72,3],[72,3],[72,3],[72,1],[76,3],[76,3],[76,3],[76,3],[76,1],[34,3],[34,3],[34,1],[83,3],[83,3],[83,3],[83,3],[83,1],[88,2],[88,1],[90,1],[90,1],[90,2],[90,2],[90,3],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[45,4],[97,3],[97,1],[97,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; globresults.push( $$[$0-1] ); 
break;
case 3:
 this.$ = "<li><span class=\"caret\">IMPORT</span>\n<ul class=\"nested\">\n" + $$[$0]; 
break;
case 4:
 this.$ = $$[$0-1] + "<li><span class=\"caret\">IMPORT</span>\n<ul class=\"nested\">\n" + $$[$0]; 
break;
case 5:
 this.$ = "<li><span class=\"caret\">CLASS</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; 
break;
case 6:
 this.$ = $$[$0-1] + "<li><span class=\"caret\">CLASS</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";; 
break;
case 7:
 this.$ = "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 8:
 for(var i = 0 ; i < temp.length; i++){temp[i].PARENT += "class: " + $$[$0-3] + " ";} this.$ = "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li><span class=\"caret\">CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li>"+ $$[$0] +"</li>\n"; temp.unshift({TIPO: "class", VALUE: $$[$0-3], PARENT: "class"}); for(var i = 0; i < temp.length; i++){globresultsFVC.push(temp[i]);} temp = []; 
break;
case 9:
 this.$ = "<li><span class=\"caret\">IMPORTS</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + $$[$0];
break;
case 10:
 this.$ = $$[$0];
break;
case 11: case 14: case 50:
 try{ globerrores.push(new Error(yytext, 'SINTACTICO', _$[$0].first_line, _$[$0].first_column)); }catch(e){} /*console.log(yytext);*/
break;
case 12:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 13: case 109:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = "<li><span class=\"caret\">FUNCION</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" 
break;
case 16:
this.$ = "<li><span class=\"caret\">DECLARACION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n"; temp[temp.length-1].ENTORNO = "g";
break;
case 17:
 for(var i = 0 ; i < temp.length; i++){ if((temp[i].TIPO == "variable" || temp[i].TIPO == "return") && temp[i].ENTORNO == "f"+ $$[$0-4]){temp[i].PARENT += "funcion: " + $$[$0-4] + " "; temp[i].ENTORNO = "fa";} } this.$ = "<li>"+ $$[$0-5] +"</li>\n" + "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">PARAMETROS</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; temp.push({TIPO: "funcion", VALUE: "Tipo: " + $$[$0-5] + " Nombre: " + $$[$0-4] + " Parametros: " +  $$[$0-2], PARENT: "", NOMBRE: $$[$0-4]});
break;
case 18:
 for(var i = 0 ; i < temp.length; i++){if((temp[i].TIPO == "variable" || temp[i].TIPO == "return") && temp[i].ENTORNO == "f"+ $$[$0-4]){temp[i].PARENT += "funcion: " + $$[$0-4] + " "; temp[i].ENTORNO = "fa";}} this.$ = "<li>"+ $$[$0-5] +"</li>\n" + "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">PARAMETROS</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; temp.push({TIPO: "funcion", VALUE: "Tipo: " + $$[$0-5] + " Nombre: " + $$[$0-4] + " Parametros: " + $$[$0-2], PARENT: "", NOMBRE: $$[$0-4]});
break;
case 19: case 20:
 for(var i = 0 ; i < temp.length; i++){if((temp[i].TIPO == "variable" || temp[i].TIPO == "return") && temp[i].ENTORNO == "f"+ $$[$0-3]){temp[i].PARENT += "funcion: " + $$[$0-3] + " "; temp[i].ENTORNO = "fa";}} this.$ = "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; temp.push({TIPO: "funcion", VALUE: "Tipo: " + $$[$0-4] + " Nombre: " + $$[$0-3], PARENT: "", NOMBRE: $$[$0-3]}); 
break;
case 21: case 22: case 23: case 24: case 25: case 36: case 55: case 70: case 71: case 74: case 76: case 80: case 85: case 88: case 93: case 95:
this.$ = $$[$0];
break;
case 26:
 this.$ = $$[$0-3] + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n"
break;
case 27: case 46: case 47: case 98: case 99:
this.$ = "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n";
break;
case 28:
 this.$ = "<li>"+ $$[$0-3] +"</li>\n" + $$[$0-2] + "<li>"+ $$[$0-1] +"</li>\n" + $$[$0]; var vars = $$[$0-2].split(","); for(var i = 0 ; i < vars.length ; i++){temp.push({TIPO: "variable", VALUE: "Tipo: " + $$[$0-3] + " Nombre: " + vars[i] + " Value: " + $$[$0], PARENT: "", ENTORNO: "f"});} 
break;
case 29:
 this.$ = "<li>"+ $$[$0-1] +"</li>\n" + $$[$0] ; var vars = $$[$0].split(","); for(var i = 0 ; i < vars.length ; i++){temp.push({TIPO: "variable", VALUE: "Tipo: " + $$[$0-1] + " Nombre: " + vars[i], PARENT: "", ENTORNO: "f"});} 
break;
case 30:
this.$ = $$[$0-2] + "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n";
break;
case 31: case 34: case 96: case 97: case 101: case 102: case 103: case 104: case 105:
this.$ = "<li>"+ $$[$0] +"</li>\n";
break;
case 32: case 94:
this.$ = "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];
break;
case 33:
this.$ = $$[$0-1] + "<li>"+ $$[$0] +"</li>\n";
break;
case 35:
this.$ = $$[$0-1] + $$[$0];
break;
case 37:
this.$ = "<li><span class=\"caret\">DECLARACION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 38:
this.$ = "<li><span class=\"caret\">ASIGNACION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 39:
 this.$ = "<li><span class=\"caret\">SENTENCIA_IF</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; 
break;
case 40:
this.$ = "<li><span class=\"caret\">SENTENCIA_SWITCH</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 41:
this.$ = "<li><span class=\"caret\">SENTENCIA_WHILE</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 42:
this.$ = "<li><span class=\"caret\">SENTENCIA_DOWHILE</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 43:
this.$ = "<li><span class=\"caret\">SENTENCIA_FOR</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 44:
this.$ = "<li><span class=\"caret\">SENTENCIA_PRINT</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 45:
this.$ = "<li><span class=\"caret\">SENTENCIA_LLAMADA_F</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 48:
this.$ = "<li>"+ $$[$0-2] +"</li>\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n"; temp.unshift({TIPO: "return", VALUE: $$[$0-1] , PARENT: "", ENTORNO: "f"});
break;
case 49:
this.$ = "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n"; temp.unshift({TIPO: "return", VALUE: "none" , PARENT: "", ENTORNO: "f"}); 
break;
case 51:
this.$ = "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];
break;
case 52: case 100:
this.$ = "<li>"+ $$[$0-2] +"</li>\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n";
break;
case 53:
 if($$[$0] == null){this.$ = $$[$0-1];}else this.$ = $$[$0-1] + $$[$0];
break;
case 54:
this.$ = "<li><span class=\"caret\">IF</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">ELSE_IF</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 56:
this.$ = "<li><span class=\"caret\">ELSE</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 57:
this.$ = null;
break;
case 58:
 this.$ = "<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; 
break;
case 59:
this.$ = "<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0-4] + "</ul>\n</li>\n" + "<li>"+ $$[$0-3] +"</li>\n";
break;
case 60:
 this.$ = $$[$0-4] + "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n"+ "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CASE_CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" + "</ul>\n</li>\n";
break;
case 61:
 this.$ = $$[$0-3] + "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li>"+ $$[$0] +"</li>\n" + "</ul>\n</li>\n";
break;
case 62:
this.$ = "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CASE_CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" + "</ul>\n</li>\n"; 
break;
case 63:
this.$ = "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li>"+ $$[$0] +"</li>\n" + "</ul>\n</li>\n"; 
break;
case 64:
this.$ = "<li><span class=\"caret\">DEFAULT</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">DEFAULT_CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" + "</ul>\n</li>\n";
break;
case 65:
this.$ = "<li><span class=\"caret\">DEFAULT</span>\n<ul class=\"nested\">\n"+  "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n" + "</ul>\n</li>\n";
break;
case 67:
this.$ ="<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 68:
this.$ = "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; 
break;
case 69:
this.$ = "<li>"+ $$[$0-8] +"</li>\n" + "<li><span class=\"caret\">DECLARACION</span>\n<ul class=\"nested\">\n" + $$[$0-7] + "</ul>\n</li>\n" + "<li>"+ $$[$0-6] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-5] + "</ul>\n</li>" + "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 72:
this.$ = $$[$0-1] + "<li><span class=\"caret\">IMPRIMIR</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 73: case 75: case 77: case 78: case 79: case 81: case 82: case 83: case 84: case 86: case 87: case 89: case 90: case 91: case 92:
this.$ = $$[$0-2] + "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];
break;
case 106:
this.$ = "<li><span class=\"caret\">LLAMADA_FUNCION</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 107:
 if($$[$0-1] == "none"){this.$ = "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n";}else{this.$ = "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li><span class=\"caret\">PARAMETROS</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li>"+ $$[$0] +"</li>\n";}
break;
case 108:
 if($$[$0-2] == "none"){this.$ = "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];}else{this.$ = $$[$0-2] + "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];}
break;
case 110:
 this.$ = "none";
break;
}
},
table: [{2:[1,6],3:1,4:2,5:[1,3],6:4,7:7,8:5,9:8,10:$V0,13:$V1},{1:[3]},{5:[1,11]},{1:[2,2]},{7:13,8:12,9:8,10:$V0,13:$V1},{5:[2,10],9:14,13:$V1},{5:[2,11]},o($V2,[2,3]),o($V3,[2,5]),{11:[1,15]},{11:[1,16]},{1:[2,1]},{5:[2,9],9:14,13:$V1},o($V2,[2,4]),o($V3,[2,6]),{12:[1,17]},{14:[1,18]},o($V2,[2,7]),{2:[1,21],15:19,17:20,18:22,19:23,20:24,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{16:[1,31],17:32,18:22,19:23,20:24,25:$V4,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},o($Va,[2,13]),o($Va,[2,14]),o($Va,[2,15]),{12:[1,33]},{11:[1,34],32:35},{11:[1,36]},{11:[2,21]},{11:[2,22]},{11:[2,23]},{11:[2,24]},{11:[2,25]},o($V3,[2,8]),o($Va,[2,12]),o($Va,[2,16]),o($Vb,$Vc,{21:[1,37]}),{12:[2,29],31:[1,39],33:[1,38]},{21:[1,40]},{20:43,22:41,23:[1,42],26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{11:$Vd,21:$Ve,34:44,45:58,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:[1,59]},{20:43,22:60,23:[1,61],26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{23:[1,62],31:$Vn},{14:$Vo,24:64},{11:[1,66]},{12:[2,28],81:$Vp,82:$Vq},o($Vr,[2,88],{84:[1,69],85:[1,70],86:[1,71],87:$Vs}),o($Vt,[2,93]),{11:$Vd,21:$Ve,45:58,82:$Vf,88:73,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},o($Vt,[2,95]),o($Vt,[2,96]),o($Vt,[2,97]),{91:[1,74],92:[1,75]},{11:$Vd,21:$Ve,34:76,45:58,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},o($Vt,[2,101]),o($Vt,[2,102]),o($Vt,[2,103]),o($Vt,[2,104]),o($Vt,[2,105],{21:$Vu}),o($Vt,[2,106]),o($Vb,[2,30]),{23:[1,78],31:$Vn},{14:$Vo,24:79},{14:$Vo,24:80},{20:81,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},o($Va,[2,19]),{2:$Vv,11:$Vw,16:[1,84],19:86,20:99,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,35:82,36:83,37:85,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,46:$Vx,47:$Vy,48:$Vz,51:101,54:107,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF},o($VG,[2,27]),{11:$Vd,21:$Ve,34:109,45:58,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:110,45:58,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,45:58,82:$Vf,83:111,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,45:58,82:$Vf,83:112,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,45:58,82:$Vf,83:113,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,45:58,82:$Vf,83:114,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},o($Vt,[2,94]),o($Vt,[2,98]),o($Vt,[2,99]),{23:[1,115],81:$Vp,82:$Vq},o($VG,[2,110],{83:45,88:46,90:48,45:58,97:116,34:117,11:$Vd,21:$Ve,82:$Vf,89:$Vg,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm}),{14:$Vo,24:118},o($Va,[2,20]),o($Va,[2,17]),{11:[1,119]},o($VH,[2,32]),{2:$Vv,11:$Vw,16:[1,120],19:86,20:99,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,37:121,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,46:$Vx,47:$Vy,48:$Vz,51:101,54:107,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF},o($VH,[2,34]),o($VI,[2,36]),{12:[1,122]},{12:[1,123]},o($VI,[2,39]),o($VI,[2,40]),o($VI,[2,41]),{12:[1,124]},o($VI,[2,43]),{12:[1,125]},{12:[1,126]},{12:[1,127]},{12:[1,128]},{11:$Vd,12:[1,130],21:$Ve,34:129,45:58,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},o($VI,[2,50]),{11:[1,131],32:35},{21:$Vu,33:[1,132]},o($VI,[2,57],{52:133,53:[1,134]}),{21:$VJ,49:135},{21:$VJ,49:137},{14:$Vo,24:138},{21:[1,139]},{21:$VJ,49:140},o($VK,[2,55]),{21:$VJ,49:141},o($Vr,[2,86]),o($Vr,[2,87]),o($VL,[2,89],{87:$Vs}),o($VL,[2,90],{87:$Vs}),o($VL,[2,91],{87:$Vs}),o($VL,[2,92],{87:$Vs}),o($Vt,[2,100]),{23:[1,142],31:[1,143]},o($VG,[2,109],{81:$Vp,82:$Vq}),o($Va,[2,18]),o($VG,[2,26]),o($VH,[2,33]),o($VI,[2,35]),o($VI,[2,37]),o($VI,[2,38]),o($VI,[2,42]),o($VI,[2,44]),o($VI,[2,45]),o($VI,[2,46]),o($VI,[2,47]),{12:[1,144],81:$Vp,82:$Vq},o($VI,[2,49]),o($Vb,$Vc),{11:$Vd,21:$Ve,34:145,45:58,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},o($VI,[2,53]),{14:$Vo,24:147,54:146,55:$VA},{14:[1,148]},{11:$Vd,21:$Ve,34:153,45:58,50:149,70:150,72:151,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{14:$Vo,24:154},{62:[1,155]},{19:156,20:99,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9},{12:[2,72]},{14:$Vo,24:157},o($Vt,[2,107]),{11:$Vd,21:$Ve,34:158,45:58,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},o($VI,[2,48]),{12:[2,51],81:$Vp,82:$Vq},o($VK,[2,54]),o($VI,[2,56]),{57:159,59:[1,160]},{23:[1,161],69:$VM},o($VN,[2,74],{71:[1,163]}),o($VO,[2,76],{73:[1,164],74:[1,165],75:[1,166]}),o($VP,[2,80],{77:[1,167],78:[1,168],79:[1,169],80:[1,170]}),o($VQ,[2,85],{81:$Vp,82:$Vq}),o($VI,[2,67]),{21:$VJ,49:171},{12:[1,172]},o($VK,[2,58]),o($VG,[2,108],{81:$Vp,82:$Vq}),{16:[2,66],58:173,59:[1,174],61:[1,175]},{11:$Vd,21:$Ve,34:153,45:58,50:176,70:150,72:151,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},o([12,14],[2,52]),{11:$Vd,21:$Ve,34:153,45:58,50:177,70:150,72:151,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,70:178,72:151,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,72:179,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,72:180,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,72:181,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,76:182,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,76:183,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,76:184,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{11:$Vd,21:$Ve,34:153,45:58,76:185,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{12:[2,68]},{11:$Vd,21:$Ve,34:153,45:58,50:186,70:150,72:151,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{16:[1,187]},{11:$Vd,21:$Ve,34:153,45:58,50:188,70:150,72:151,76:152,82:$Vf,83:45,88:46,89:$Vg,90:48,91:$Vh,92:$Vi,93:$Vj,94:$Vk,95:$Vl,96:$Vm},{60:[1,189]},{60:[1,190],69:$VM},o($VN,[2,73]),o($VO,[2,75]),o($VP,[2,77]),o($VP,[2,78]),o($VP,[2,79]),o($VQ,[2,81]),o($VQ,[2,82]),o($VQ,[2,83]),o($VQ,[2,84]),{12:[1,191],69:$VM},o($VI,[2,59]),{60:[1,192],69:$VM},{2:$Vv,11:$Vw,16:[2,65],19:86,20:99,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,36:193,37:85,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,46:$Vx,47:$Vy,48:$Vz,51:101,54:107,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF},o($VR,[2,63],{37:85,19:86,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,20:99,51:101,54:107,36:194,2:$Vv,11:$Vw,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,46:$Vx,47:$Vy,48:$Vz,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF}),{11:[1,195]},o($VR,[2,61],{37:85,19:86,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,20:99,51:101,54:107,36:196,2:$Vv,11:$Vw,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,46:$Vx,47:$Vy,48:$Vz,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF}),{2:$Vv,11:$Vw,16:[2,64],19:86,20:99,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,37:121,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,46:$Vx,47:$Vy,48:$Vz,51:101,54:107,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF},o($VR,[2,62],{19:86,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,20:99,51:101,54:107,37:121,2:$Vv,11:$Vw,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,46:$Vx,47:$Vy,48:$Vz,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF}),{65:197,66:[1,198],67:[1,199]},o($VR,[2,60],{19:86,38:87,39:88,40:89,41:90,42:91,43:92,44:93,45:94,20:99,51:101,54:107,37:121,2:$Vv,11:$Vw,26:$V5,27:$V6,28:$V7,29:$V8,30:$V9,46:$Vx,47:$Vy,48:$Vz,55:$VA,56:$VB,62:$VC,63:$VD,64:$VE,68:$VF}),{23:[1,200]},{23:[2,70]},{23:[2,71]},{14:$Vo,24:201},o($VI,[2,69])],
defaultActions: {3:[2,2],6:[2,11],11:[2,1],26:[2,21],27:[2,22],28:[2,23],29:[2,24],30:[2,25],140:[2,72],171:[2,68],198:[2,70],199:[2,71]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Node = require('./clases/Node');
	const Error = require('./clases/Error');
     temp = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:return 66;
break;
case 3:return 67;
break;
case 4:return 81;
break;
case 5:return 82;   
break;
case 6:return 84;
break;
case 7:return 87;
break;
case 8:return 85;
break;
case 9:return 86;
break;
case 10:return 79;
break;
case 11:return 80;
break;
case 12:return 78;
break;
case 13:return 77;
break;
case 14:return 74;
break;
case 15:return 75;
break;
case 16:return 73;
break;
case 17:return 'llavea';     
break;
case 18:return 'llavec';
break;
case 19:return 14;     
break;
case 20:return 16;
break;
case 21:return 21;     
break;
case 22:return 23;
break;
case 23:return 31;
break;
case 24:return 'punto';
break;
case 25:return 33;
break;
case 26:return 12;
break;
case 27:return 60;
break;
case 28:return 89;
break;
case 29:return 71;
break;
case 30:return 69;
break;
case 31:return 26;
break;
case 32:return 27;
break;
case 33:return 29;
break;
case 34:return 30;
break;
case 35:return 10;
break;
case 36:return 95;
break;
case 37:return 96;
break;
case 38:return 55;
break;
case 39:return 53;
break;
case 40:return 56;
break;
case 41:return 59;
break;
case 42:return 61;
break;
case 43:return 46;
break;
case 44:return 47;
break;
case 45:return 48;
break;
case 46:return 68;
break;
case 47:return 'resprintln';
break;
case 48:return 25;
break;
case 49:return 64;
break;
case 50:return 62;
break;
case 51:return 63;
break;
case 52:return 28;
break;
case 53:return 13;
break;
case 54:return 10;
break;
case 55:
break;
case 56:return 94;
break;
case 57:return 91;
break;
case 58:return 92;
break;
case 59:return 93;
break;
case 60:return 11;
break;
case 61:return 5;
break;
case 62: try{ globerrores.push(new Error(yy_.yytext, 'LEXICO', yy_.yylloc.first_line, yy_.yylloc.first_column));  }catch(e){}
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:import\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:System\.out\.println\b)/,/^(?:println\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:[ \r\t\n]+)/,/^(?:'[^]')/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([\"](\\"|[^"])*[^\\][\"])|[\"][\"])/,/^(?:([a-zA-Z""])[a-z0-9A-Z"""ñ""Ñ"]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}