/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,8],$V2=[8,12],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[15,25,26,27,28,29],$V9=[2,15],$Va=[1,30],$Vb=[2,29],$Vc=[9,10,15,25,26,27,28,29,44,45,46,53,54,57,59,60,61,62,66],$Vd=[1,54],$Ve=[1,49],$Vf=[1,48],$Vg=[1,44],$Vh=[1,46],$Vi=[1,47],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,59],$Vo=[1,61],$Vp=[1,63],$Vq=[1,64],$Vr=[9,10,15,23,25,26,27,28,29,44,45,46,53,54,57,58,59,60,61,62,66,67,69,71,72,73,75,76,77,78,79,80],$Vs=[1,68],$Vt=[9,10,15,23,25,26,27,28,29,44,45,46,53,54,57,58,59,60,61,62,66,67,69,71,72,73,75,76,77,78,79,80,82,83,84,85],$Vu=[1,93],$Vv=[1,89],$Vw=[1,90],$Vx=[1,91],$Vy=[1,101],$Vz=[1,95],$VA=[1,96],$VB=[1,97],$VC=[1,98],$VD=[1,99],$VE=[23,30],$VF=[9,15,25,26,27,28,29,44,45,46,51,53,54,57,59,60,61,62,66],$VG=[9,15,26,27,28,29,44,45,46,53,54,57,59,60,61,62,66],$VH=[1,130],$VI=[9,15,26,27,28,29,44,45,46,51,53,54,57,59,60,61,62,66],$VJ=[9,10,15,23,25,26,27,28,29,44,45,46,53,54,57,58,59,60,61,62,66,67,69,71,72,73,75,76,77,78,79,80,82,83,84],$VK=[1,137],$VL=[9,10,15,23,26,27,28,29,44,45,46,53,54,57,58,59,60,61,62,66,67],$VM=[9,10,15,23,26,27,28,29,44,45,46,53,54,57,58,59,60,61,62,66,67,69],$VN=[9,10,15,23,26,27,28,29,44,45,46,53,54,57,58,59,60,61,62,66,67,69,71,72,73],$VO=[9,10,15,23,26,27,28,29,44,45,46,53,54,57,58,59,60,61,62,66,67,69,71,72,73,75,76,77,78],$VP=[9,10,15,26,27,28,29,44,45,46,53,54,57,59,60,61,62,66],$VQ=[15,57,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"RCLASS":4,"EOF":5,"IMPORTS":6,"IMPORTD":7,"resimport":8,"id":9,"puntocoma":10,"CLASSD":11,"resclass":12,"corchetea":13,"INSTRUCTIONSG":14,"corchetec":15,"INSTRUCTIONG":16,"FUNCTION":17,"DECLARATION":18,"SEMICOLON":19,"TYPE":20,"parenta":21,"LISTAPARAMETROS":22,"parentc":23,"BLOCK":24,"resvoid":25,"resinteger":26,"resdouble":27,"resboolean":28,"reschar":29,"coma":30,"LISTID":31,"igual":32,"EXP":33,"BLOCK2":34,"INSTRUCTIONS":35,"INSTRUCTION":36,"ASSIGNMENT":37,"IF":38,"SWITCH":39,"WHILE":40,"DOWHILE":41,"FOR":42,"PRINT":43,"resbreak":44,"rescontinue":45,"resreturn":46,"EXPRT":47,"PARAMETROUNITARIO":48,"CELSE":49,"ELSE":50,"reselse":51,"IFF":52,"resif":53,"resswitch":54,"CASES":55,"DEFAULT":56,"rescase":57,"dospuntos":58,"resdefault":59,"reswhile":60,"resdo":61,"resfor":62,"DECINC":63,"incremento":64,"decremento":65,"resprint":66,"or":67,"EXPRT2":68,"and":69,"EXPR":70,"diferente":71,"identico":72,"referencias":73,"EXPR1":74,"mayor":75,"menor":76,"mayorigual":77,"menorigual":78,"suma":79,"resta":80,"EXP1":81,"multiplicacion":82,"slash":83,"modulo":84,"potencia":85,"EXP2":86,"not":87,"EXP3":88,"decimal":89,"entero":90,"cadena":91,"caracter":92,"restrue":93,"resfalse":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"resimport",9:"id",10:"puntocoma",12:"resclass",13:"corchetea",15:"corchetec",21:"parenta",23:"parentc",25:"resvoid",26:"resinteger",27:"resdouble",28:"resboolean",29:"reschar",30:"coma",32:"igual",44:"resbreak",45:"rescontinue",46:"resreturn",51:"reselse",53:"resif",54:"resswitch",57:"rescase",58:"dospuntos",59:"resdefault",60:"reswhile",61:"resdo",62:"resfor",64:"incremento",65:"decremento",66:"resprint",67:"or",69:"and",71:"diferente",72:"identico",73:"referencias",75:"mayor",76:"menor",77:"mayorigual",78:"menorigual",79:"suma",80:"resta",82:"multiplicacion",83:"slash",84:"modulo",85:"potencia",87:"not",89:"decimal",90:"entero",91:"cadena",92:"caracter",93:"restrue",94:"resfalse"},
productions_: [0,[3,2],[3,1],[3,1],[6,1],[6,2],[7,3],[11,5],[4,2],[4,1],[14,2],[14,1],[16,1],[16,2],[19,1],[19,0],[17,6],[17,6],[17,5],[17,5],[20,1],[20,1],[20,1],[20,1],[22,4],[22,2],[18,4],[18,2],[31,3],[31,1],[24,2],[34,2],[34,1],[35,2],[35,1],[36,2],[36,2],[36,1],[36,1],[36,1],[36,2],[36,1],[36,2],[36,2],[36,2],[36,3],[36,2],[37,3],[48,3],[38,2],[49,3],[49,1],[50,2],[50,0],[52,3],[39,6],[55,5],[55,4],[55,4],[55,3],[56,3],[56,2],[56,0],[40,3],[41,4],[42,10],[63,1],[63,1],[43,2],[47,3],[47,1],[68,3],[68,1],[70,3],[70,3],[70,3],[70,1],[74,3],[74,3],[74,3],[74,3],[74,1],[33,3],[33,3],[33,1],[81,3],[81,3],[81,3],[81,3],[81,1],[86,2],[86,1],[88,1],[88,1],[88,2],[88,2],[88,3],[88,1],[88,1],[88,1],[88,1],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; globresults.push( $$[$0-1] ); 
break;
case 3:
 try{ globerrores.push(new Error('SINTACTICO', yytext, _$[$0].first_line, _$[$0].first_column)); }catch(e){} 
break;
case 4:
 this.$ = "<li><span class=\"caret\">IMPORT</span>\n<ul class=\"nested\">\n" + $$[$0]; 
break;
case 5:
 this.$ = $$[$0-1] + "<li><span class=\"caret\">IMPORT</span>\n<ul class=\"nested\">\n" + $$[$0]; 
break;
case 6:
 this.$ = "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 7:
 for(var i = 0 ; i < globresultsFVC.length; i++){globresultsFVC[i].PARENT += "class: " + $$[$0-3] + "-";} this.$ = "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li><span class=\"caret\">CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li>"+ $$[$0] +"</li>\n"; globresultsFVC.unshift({TIPO: "class", VALUE: $$[$0-3], PARENT: "class"})
break;
case 8:
 this.$ = "<li><span class=\"caret\">IMPORTS</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li><span class=\"caret\">CLASS</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 9:
this.$ = "<li><span class=\"caret\">CLASS</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 10:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 11:
 this.$ = $$[$0]; 
break;
case 12:
 this.$ = "<li><span class=\"caret\">FUNCION</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" 
break;
case 13: case 35:
this.$ = "<li><span class=\"caret\">DECLARACION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 16:
 for(var i = 0 ; i < globresultsFVC.length; i++){globresultsFVC[i].PARENT += "funcion: " + $$[$0-4] + "-";} this.$ = "<li>"+ $$[$0-5] +"</li>\n" + "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">PARAMETROS</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; globresultsFVC.unshift({TIPO: "funcion", VALUE: "Tipo: " + $$[$0-5] + " Nombre: " + $$[$0-4] + " Parametros: " +  $$[$0-2], PARENT: ""});
break;
case 17:
 for(var i = 0 ; i < globresultsFVC.length; i++){globresultsFVC[i].PARENT += "funcion: " + $$[$0-4] + "-";} this.$ = "<li>"+ $$[$0-5] +"</li>\n" + "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">PARAMETROS</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; globresultsFVC.unshift({TIPO: "funcion", VALUE: "Tipo: " + $$[$0-5] + " Nombre: " + $$[$0-4] + " Parametros: " + $$[$0-2], PARENT: ""});
break;
case 18: case 19:
 for(var i = 0 ; i < globresultsFVC.length; i++){globresultsFVC[i].PARENT += "funcion: " + $$[$0-3] + "-";} this.$ = "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; globresultsFVC.unshift({TIPO: "funcion", VALUE: "Tipo: " + $$[$0-4] + " Nombre: " + $$[$0-3], PARENT: ""}); 
break;
case 20: case 21: case 22: case 23: case 34: case 51: case 66: case 67: case 70: case 72: case 76: case 81: case 84: case 89: case 91:
this.$ = $$[$0];
break;
case 24:
 this.$ = $$[$0-3] + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n"
break;
case 25: case 94: case 95:
this.$ = "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n";
break;
case 26:
 this.$ = "<li>"+ $$[$0-3] +"</li>\n" + $$[$0-2] + "<li>"+ $$[$0-1] +"</li>\n" + $$[$0]; var vars = $$[$0-2].split(","); for(var i = 0 ; i < vars.length ; i++){globresultsFVC.unshift({TIPO: "variable", VALUE: "Tipo: " + $$[$0-3] + " Nombre: " + vars[i] + " Value: " + $$[$0], PARENT: ""});} 
break;
case 27:
 this.$ = "<li>"+ $$[$0-1] +"</li>\n" + $$[$0] ; var vars = $$[$0].split(","); for(var i = 0 ; i < vars.length ; i++){globresultsFVC.unshift({TIPO: "variable", VALUE: "Tipo: " + $$[$0-1] + " Nombre: " + vars[i], PARENT: ""});} 
break;
case 28:
this.$ = $$[$0-2] + "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n";
break;
case 29: case 32: case 92: case 93: case 97: case 98: case 99: case 100: case 101:
this.$ = "<li>"+ $$[$0] +"</li>\n";
break;
case 30: case 90:
this.$ = "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];
break;
case 31:
this.$ = $$[$0-1] + "<li>"+ $$[$0] +"</li>\n";
break;
case 33:
this.$ = $$[$0-1] + $$[$0];
break;
case 36:
this.$ = "<li><span class=\"caret\">ASIGNACION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n</ul>\n</li>\n";
break;
case 37:
 this.$ = "<li><span class=\"caret\">SENTENCIA_IF</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; 
break;
case 38:
this.$ = "<li><span class=\"caret\">SENTENCIA_SWITCH</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 39:
this.$ = "<li><span class=\"caret\">SENTENCIA_WHILE</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 40:
this.$ = "<li><span class=\"caret\">SENTENCIA_DOWHILE</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n";
break;
case 41:
this.$ = "<li><span class=\"caret\">SENTENCIA_FOR</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 42:
this.$ = "<li><span class=\"caret\">SENTENCIA_PRINT</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n";
break;
case 43: case 44: case 46:
this.$ = "<li>"+ $$[$0-1] +"</li>\n";
break;
case 45:
this.$ = "<li>"+ $$[$0-2] +"</li>\n";
break;
case 47:
this.$ = "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];
break;
case 48: case 96:
this.$ = "<li>"+ $$[$0-2] +"</li>\n" + $$[$0-1] + "<li>"+ $$[$0] +"</li>\n";
break;
case 49:
 if($$[$0] == null){this.$ = $$[$0-1];}else this.$ = $$[$0-1] + $$[$0];
break;
case 50:
this.$ = "<li><span class=\"caret\">IF</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">ELSE_IF</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 52:
this.$ = "<li><span class=\"caret\">ELSE</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 53:
this.$ = null;
break;
case 54:
 this.$ = "<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; 
break;
case 55:
this.$ = "<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0-4] + "</ul>\n</li>\n" + "<li>"+ $$[$0-3] +"</li>\n";
break;
case 56:
 this.$ = $$[$0-4] + "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n"+ "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CASE_CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" + "</ul>\n</li>\n";
break;
case 57:
 this.$ = $$[$0-3] + "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li>"+ $$[$0] +"</li>\n" + "</ul>\n</li>\n";
break;
case 58:
this.$ = "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CASE_CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" + "</ul>\n</li>\n"; 
break;
case 59:
this.$ = "<li><span class=\"caret\">CASE</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li>"+ $$[$0] +"</li>\n" + "</ul>\n</li>\n"; 
break;
case 60:
this.$ = "<li><span class=\"caret\">DEFAULT</span>\n<ul class=\"nested\">\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">DEFAULT_CONTENIDO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n" + "</ul>\n</li>\n";
break;
case 61:
this.$ = "<li><span class=\"caret\">DEFAULT</span>\n<ul class=\"nested\">\n"+  "<li>"+ $$[$0-1] +"</li>\n" + "<li>"+ $$[$0] +"</li>\n" + "</ul>\n</li>\n";
break;
case 63:
this.$ ="<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0-1] + "</ul>\n</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 64:
this.$ = "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0-2] + "</ul>\n</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CONDICIONES</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n"; 
break;
case 65:
this.$ = "<li>"+ $$[$0-8] +"</li>\n" + "<li><span class=\"caret\">DECLARACION</span>\n<ul class=\"nested\">\n" + $$[$0-7] + "</ul>\n</li>\n" + "<li>"+ $$[$0-6] +"</li>\n" + "<li><span class=\"caret\">EXPRESION</span>\n<ul class=\"nested\">\n" + $$[$0-5] + "</ul>\n</li>" + "<li>"+ $$[$0-4] +"</li>\n" + "<li>"+ $$[$0-3] +"</li>\n" + "<li>"+ $$[$0-2] +"</li>\n" + "<li>"+ $$[$0-1] +"</li>\n" + "<li><span class=\"caret\">CUERPO</span>\n<ul class=\"nested\">\n" + $$[$0] + "</ul>\n</li>\n";
break;
case 68:
this.$ = $$[$0-1];
break;
case 69: case 71: case 73: case 74: case 75: case 77: case 78: case 79: case 80: case 82: case 83: case 85: case 86: case 87: case 88:
this.$ = $$[$0-2] + "<li>"+ $$[$0-1] +"</li>\n" + $$[$0];
break;
}
},
table: [{2:[1,4],3:1,4:2,5:[1,3],6:5,7:7,8:$V0,11:6,12:$V1},{1:[3]},{5:[1,10]},{1:[2,2]},{1:[2,3]},{7:12,8:$V0,11:11,12:$V1},{5:[2,9]},o($V2,[2,4]),{9:[1,13]},{9:[1,14]},{1:[2,1]},{5:[2,8]},o($V2,[2,5]),{13:[1,15]},{10:[1,16]},{14:17,16:18,17:19,18:20,20:21,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},o($V2,[2,6]),{15:[1,27],16:28,17:19,18:20,20:21,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7},o($V8,[2,11]),o($V8,[2,12]),o($V8,$V9,{19:29,10:$Va}),{9:[1,31],31:32},{9:[1,33]},{9:[2,20]},{9:[2,21]},{9:[2,22]},{9:[2,23]},{5:[2,7]},o($V8,[2,10]),o($V8,[2,13]),o([9,15,25,26,27,28,29,44,45,46,53,54,57,59,60,61,62,66],[2,14]),o([10,15,25,26,27,28,29,30,32],$Vb,{21:[1,34]}),o($Vc,[2,27],{30:[1,36],32:[1,35]}),{21:[1,37]},{20:40,22:38,23:[1,39],26:$V4,27:$V5,28:$V6,29:$V7},{9:$Vd,21:$Ve,33:41,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:[1,55]},{20:40,22:56,23:[1,57],26:$V4,27:$V5,28:$V6,29:$V7},{23:[1,58],30:$Vn},{13:$Vo,24:60},{9:[1,62]},o($Vc,[2,26],{79:$Vp,80:$Vq}),o($Vr,[2,84],{82:[1,65],83:[1,66],84:[1,67],85:$Vs}),o($Vt,[2,89]),{9:$Vd,21:$Ve,80:$Vf,86:69,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},o($Vt,[2,91]),o($Vt,[2,92]),o($Vt,[2,93]),{89:[1,70],90:[1,71]},{9:$Vd,21:$Ve,33:72,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},o($Vt,[2,97]),o($Vt,[2,98]),o($Vt,[2,99]),o($Vt,[2,100]),o($Vt,[2,101]),o([9,10,15,25,26,27,28,29,30,32,44,45,46,53,54,57,59,60,61,62,66],[2,28]),{23:[1,73],30:$Vn},{13:$Vo,24:74},{13:$Vo,24:75},{20:76,26:$V4,27:$V5,28:$V6,29:$V7},o($V8,[2,18]),{9:$Vu,15:[1,79],18:81,20:92,26:$V4,27:$V5,28:$V6,29:$V7,34:77,35:78,36:80,37:82,38:83,39:84,40:85,41:86,42:87,43:88,44:$Vv,45:$Vw,46:$Vx,49:94,52:100,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD},o($VE,[2,25]),{9:$Vd,21:$Ve,33:102,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:103,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,80:$Vf,81:104,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,80:$Vf,81:105,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,80:$Vf,81:106,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,80:$Vf,81:107,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},o($Vt,[2,90]),o($Vt,[2,94]),o($Vt,[2,95]),{23:[1,108],79:$Vp,80:$Vq},{13:$Vo,24:109},o($V8,[2,19]),o($V8,[2,16]),{9:[1,110]},o($VF,[2,30]),{9:$Vu,15:[1,111],18:81,20:92,26:$V4,27:$V5,28:$V6,29:$V7,36:112,37:82,38:83,39:84,40:85,41:86,42:87,43:88,44:$Vv,45:$Vw,46:$Vx,49:94,52:100,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD},o($VF,[2,32]),o($VG,[2,34]),o($VG,$V9,{19:113,10:$Va}),o($VG,$V9,{19:114,10:$Va}),o($VG,[2,37]),o($VG,[2,38]),o($VG,[2,39]),o($VG,$V9,{19:115,10:$Va}),o($VG,[2,41]),o($VG,$V9,{19:116,10:$Va}),o($VG,$V9,{19:117,10:$Va}),o($VG,$V9,{19:118,10:$Va}),{9:$Vd,10:[1,120],21:$Ve,33:124,47:119,68:121,70:122,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:[1,125],31:32},{32:[1,126]},o($VG,[2,53],{50:127,51:[1,128]}),{21:$VH,48:129},{21:$VH,48:131},{13:$Vo,24:132},{21:[1,133]},{21:$VH,48:134},o($VI,[2,51]),{21:$VH,48:135},o($Vr,[2,82]),o($Vr,[2,83]),o($VJ,[2,85],{85:$Vs}),o($VJ,[2,86],{85:$Vs}),o($VJ,[2,87],{85:$Vs}),o($VJ,[2,88],{85:$Vs}),o($Vt,[2,96]),o($V8,[2,17]),o($VE,[2,24]),o($VF,[2,31]),o($VG,[2,33]),o($VG,[2,35]),o($VG,[2,36]),o($VG,[2,40]),o($VG,[2,42]),o($VG,[2,43]),o($VG,[2,44]),o($VG,$V9,{19:136,10:$Va,67:$VK}),o($VG,[2,46]),o($VL,[2,70],{69:[1,138]}),o($VM,[2,72],{71:[1,139],72:[1,140],73:[1,141]}),o($VN,[2,76],{75:[1,142],76:[1,143],77:[1,144],78:[1,145]}),o($VO,[2,81],{79:$Vp,80:$Vq}),o([9,10,15,26,27,28,29,30,32,44,45,46,53,54,57,59,60,61,62,66],$Vb),{9:$Vd,21:$Ve,33:146,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},o($VG,[2,49]),{13:$Vo,24:148,52:147,53:$Vy},{13:[1,149]},{9:$Vd,21:$Ve,33:124,47:150,68:121,70:122,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{13:$Vo,24:151},{60:[1,152]},{18:153,20:92,26:$V4,27:$V5,28:$V6,29:$V7},o($VP,[2,68]),{13:$Vo,24:154},o($VG,[2,45]),{9:$Vd,21:$Ve,33:124,47:155,68:121,70:122,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,68:156,70:122,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,70:157,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,70:158,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,70:159,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,74:160,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,74:161,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,74:162,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{9:$Vd,21:$Ve,33:124,74:163,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},o($VP,[2,47],{79:$Vp,80:$Vq}),o($VI,[2,50]),o($VG,[2,52]),{55:164,57:[1,165]},{23:[1,166],67:$VK},o($VG,[2,63]),{21:$VH,48:167},{10:[1,168]},o($VI,[2,54]),o($VL,[2,69]),o($VM,[2,71]),o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),o($VO,[2,77]),o($VO,[2,78]),o($VO,[2,79]),o($VO,[2,80]),{15:[2,62],56:169,57:[1,170],59:[1,171]},{9:$Vd,21:$Ve,33:124,47:172,68:121,70:122,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},o([9,10,13,15,26,27,28,29,44,45,46,53,54,57,59,60,61,62,66],[2,48]),o($VP,[2,64]),{9:$Vd,21:$Ve,33:124,47:173,68:121,70:122,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{15:[1,174]},{9:$Vd,21:$Ve,33:124,47:175,68:121,70:122,74:123,80:$Vf,81:42,86:43,87:$Vg,88:45,89:$Vh,90:$Vi,91:$Vj,92:$Vk,93:$Vl,94:$Vm},{58:[1,176]},{58:[1,177],67:$VK},{10:[1,178],67:$VK},o($VG,[2,55]),{58:[1,179],67:$VK},{9:$Vu,15:[2,61],18:81,20:92,26:$V4,27:$V5,28:$V6,29:$V7,35:180,36:80,37:82,38:83,39:84,40:85,41:86,42:87,43:88,44:$Vv,45:$Vw,46:$Vx,49:94,52:100,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD},o($VQ,[2,59],{36:80,18:81,37:82,38:83,39:84,40:85,41:86,42:87,43:88,20:92,49:94,52:100,35:181,9:$Vu,26:$V4,27:$V5,28:$V6,29:$V7,44:$Vv,45:$Vw,46:$Vx,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD}),{9:[1,182]},o($VQ,[2,57],{36:80,18:81,37:82,38:83,39:84,40:85,41:86,42:87,43:88,20:92,49:94,52:100,35:183,9:$Vu,26:$V4,27:$V5,28:$V6,29:$V7,44:$Vv,45:$Vw,46:$Vx,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD}),{9:$Vu,15:[2,60],18:81,20:92,26:$V4,27:$V5,28:$V6,29:$V7,36:112,37:82,38:83,39:84,40:85,41:86,42:87,43:88,44:$Vv,45:$Vw,46:$Vx,49:94,52:100,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD},o($VQ,[2,58],{18:81,37:82,38:83,39:84,40:85,41:86,42:87,43:88,20:92,49:94,52:100,36:112,9:$Vu,26:$V4,27:$V5,28:$V6,29:$V7,44:$Vv,45:$Vw,46:$Vx,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD}),{63:184,64:[1,185],65:[1,186]},o($VQ,[2,56],{18:81,37:82,38:83,39:84,40:85,41:86,42:87,43:88,20:92,49:94,52:100,36:112,9:$Vu,26:$V4,27:$V5,28:$V6,29:$V7,44:$Vv,45:$Vw,46:$Vx,53:$Vy,54:$Vz,60:$VA,61:$VB,62:$VC,66:$VD}),{23:[1,187]},{23:[2,66]},{23:[2,67]},{13:$Vo,24:188},o($VG,[2,65])],
defaultActions: {3:[2,2],4:[2,3],6:[2,9],10:[2,1],11:[2,8],23:[2,20],24:[2,21],25:[2,22],26:[2,23],27:[2,7],185:[2,66],186:[2,67]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Node = require('./clases/Node');
	const Error = require('./clases/Error');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 64;
break;
case 1:return 65;
break;
case 2:return 79;
break;
case 3:return 80;   
break;
case 4:return 82;
break;
case 5:return 85;
break;
case 6:return 83;
break;
case 7:return 84;
break;
case 8:return 77;
break;
case 9:return 78;
break;
case 10:return 76;
break;
case 11:return 75;
break;
case 12:return 72;
break;
case 13:return 73;
break;
case 14:return 71;
break;
case 15:return 'llavea';     
break;
case 16:return 'llavec';
break;
case 17:return 13;     
break;
case 18:return 15;
break;
case 19:return 21;     
break;
case 20:return 23;
break;
case 21:return 30;
break;
case 22:return 'punto';
break;
case 23:return 32;
break;
case 24:return 10;
break;
case 25:return 58;
break;
case 26:return 87;
break;
case 27:return 69;
break;
case 28:return 67;
break;
case 29:return 26;
break;
case 30:return 27;
break;
case 31:return 29;
break;
case 32:return 8;
break;
case 33:return 93;
break;
case 34:return 94;
break;
case 35:return 53;
break;
case 36:return 51;
break;
case 37:return 54;
break;
case 38:return 57;
break;
case 39:return 59;
break;
case 40:return 44;
break;
case 41:return 45;
break;
case 42:return 46;
break;
case 43:return 66;
break;
case 44:return 'resprintln';
break;
case 45:return 25;
break;
case 46:return 62;
break;
case 47:return 60;
break;
case 48:return 61;
break;
case 49:return 28;
break;
case 50:return 12;
break;
case 51:return 8;
break;
case 52:
break;
case 53:
break;
case 54:return 89;
break;
case 55:return 90;
break;
case 56:return 9;
break;
case 57:return 92;
break;
case 58:return 91;
break;
case 59:return 5;
break;
case 60: try{ globerrores.push(new Error('LEXICO', yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));  }catch(e){}
break;
}
},
rules: [/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:\/)/,/^(?:%)/,/^(?:>=)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:\.)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:!)/,/^(?:&)/,/^(?:\|)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:import\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:System\.out\.println\b)/,/^(?:println\b)/,/^(?:void\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:boolean\b)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:\/\/.*[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/][0-9]+\.[0-9]+\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z"_"])[a-z0-9A-Z"_""ñ""Ñ"]*)/,/^(?:[\'][^][\'])/,/^(?:([\"](\\"|[^\"])*[^\\][^\"])|[^\"][^\"])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}